import os
import math
import time
import sys
import yaml
import numpy as np
import pandas as pd
from src.util import FileLevelOLEDataset, OLEDataset, ExeDataset,write_pred
from src.model import MalConv, FileLevelModel
from torch.utils.data import DataLoader
import torch
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable

#dataset = OLEDataset("./train_dataset.csv")
dataset = FileLevelOLEDataset("./oledata/parsed", "./oledata/parsed", "./file_status.csv")

first_data = dataset[0]
features, labels = first_data
input_size = len(features)
print(f"Input size: {input_size}")
print("First feature and label")
print(features, labels)
print()

batch_size = 1 
dataloader = DataLoader(dataset=dataset, batch_size=batch_size, shuffle=True, num_workers=2)
num_epochs = 100
total_samples = len(dataset)
n_iterations = math.ceil(total_samples/batch_size)
print(total_samples, n_iterations)

# Later, to load the model:
model = FileLevelModel(1018, 500)
model.load_state_dict(torch.load('./ole_model.pth'))
model.eval()

def round_prediction(prediction): 
    rounded_value = round(prediction.item())
    return rounded_value


with torch.no_grad(): 
    for i, (streams, labels) in enumerate(dataloader): 
        print(streams)
        pred = model(streams)
        corrected_prediction = round_prediction(pred)
        print(f"Prediction: {pred}, Corrected Prediction: {corrected_prediction}")
        print(f"Prediction: {pred}")
